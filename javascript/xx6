RegExp:  regular Expression 正则表达式
reg.exec(str);//匹配执行
c{n} 匹配c，n次  匹配不成功返回NULL
c{m,n} 匹配c 大于等于m次，小于等于n次  会尽量多匹配（贪婪的）
c{n,} 匹配大于等于n次，无上限
量词：
    c*和C{0,}意思等同
    c+ 和 c{1,}意思一样
    c？和c{0,1}意思一样

    reg = /c{1,}?/;//加个 ？ 变成非贪婪的
    reg = /^c/;//以c开头 $以什么结尾
    reg = /./;//匹配一个任意字符，除了换行
    reg = /.+/;//匹配一个或多个任意字符，除了换行
    /\./加一个转译符\没有特殊意义

    reg = /^b|c.+/;
    reg = /^（b|c）.+/;//提高优先级
    reg = /^[abc]/;// 以a|b|c开头的
    reg = /^[a-zA-Z][a-zA-Z0-9_]+/;命名规则
    reg = /[^abc]/;//反字符集合，第一个不符合，会继续向后匹配
    reg = /\bc/;//\b边界在c的左边，c为左边界
    reg = /ab cd/;//此时c也是边界
    reg = /\Bc/;//\B非边界
    \d 匹配数字 \D 匹配非数字
    \s 匹配空格 \S 非空格
    \w 相当于 [a-zA-Z0-9]
    g全局的
    i
    test查看匹配结果 true or false
    /\d+$/g.exec("30CAA0040");
    /^\d{3,4}-\d{7,8}(-\d{3,4})?$/电话号码


trim: 去首尾空格











