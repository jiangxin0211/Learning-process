布局是瀑布流

图片懒加载，
是浏览器的Onscroll事件，这个问题我有发现过

就是滚动比较快的时候会发送多次请求，为了避免这种情况，我是在每一批图片全部加载完以后我再会再发送新的请求

首先我在scroll事件中判断瀑布流是否到达了最底部，然后再加ajax再加载一批图片，但是如果我在图片正在加载的过程中，
如果我滚动过快，就会发生刚才说的现象，这个时候我设置了一个标识位，判断是否这一批所有的图片全部加载完，
通过计数，如果图片全没有加载完我不再发送请求

json数组，在数组中有很多图片对象，每一个对象有图片的src地址


没明白？


就是在本地的图片的存储的相对路径

哦明白了，这是后端用php动态生成的图片命名规则，

日期+时间+随机数

20150102

不是

宽度固定，高度不固定


图片首先在Php中通过图片压缩的算法来完成的，压缩的时候宽压成一样的

排列的时候是通过三个ul列表，我取出来一批图片，判断三个Ul中哪个高度最小，然后将图片插到这个Ul中，

三个横向排列的ul，每个ul中有一个一个图的li，每个Li中有图片


有一个计算Ul的高度的算法

不会的，每插一张图片，我都会动态算每个ul的高度

就是获取三个ul，判断他们的高度啊，返回最小的那个

找到一个最短的，就往里插

一个一个插，但每插之前先找最短的Ul的高度，然后往里插

就是按顺序插，图片没有顺序


和图片的高度没有关系，我是找最短的Ul的高度


我再具体点说吧，我这一些ajax请求，获取了12张图片，然后我遍历这12张图片，每循环一次，
找最短的Ul，然后将这些图片插入到这个Ul中，因为每次都是找最短的ul，而这个ul不一定是哪个Ul，
总会比较平均的分布，不会出现某一个ul过长

我没有获得图片的高度，是Ul的高度


是的

是的，后台php压缩算法，这个是后台的了，我不太清楚


动态弹窗组件，我是用require.js封装的一个组件

我首先封装了一个弹层的类

function Dialog(){}

在这个类下我封装了两个方法open和close


代表打开和关闭

您还想问什么


主要是动态创建弹层的html结构，然后加载指定的内容，注册一些事件

关闭主是remove这个html结构

多的，我刚才说封装了一个类

因为我考虑可能在一个页面中可能会打开多个窗口，所以需要多个实例


我明白你的意思，我只是这样考虑，但是实际上这个例子中只需要一个窗口


在我的例子中，不会再打开新的


就是外面有一个div,充满整个窗口，透明度0.5

定位。left/right/bottom/top都设为0

还有另外一种方式，把html,body设置成为


opacity: 0.5
ie中filter: alpha(opacity：50)

子元素也会跟着透明

可以使用两个并列的div，里面的那个盖住外面的那个，两个div透明度不一样


可以使用background: rgba(,0.5)最后那个a是透明度的意思


部分，
继承的：字体
不继承的：好多，宽和高这此都不是

首先它把那些图片合并成一个字体文件和css文件，减少了图片的个数

还有它可以像字体一样设置颜色和大小。非常方便


这个也要看情况吧，如果只是一个小图标的话，一个图片文件可能会来的更小

但是icon-font可能会需要字体文件，这个文件会比较大


因为图片加载的时候会访问服务器，图片越多，对服务器的访问压力越大


因为图片多了不好管理，命名也不方便


一个大图要快，因为请求少啊

请求多了对服务端压力大，可能会导致响应变慢


请求、响应、加载

这个跟网络速度 也有关啊

还有浏览器的在底层的渲染有关系，你就想让浏览器同时干一个活和干多个活哪个快吧


当浏览器渲染的时候会发生重排和重绘

比如对一个元素改变宽和高，会导致后面的元素位置发生变化 ，这会导致重排

具体这个我觉得看情况吧，比如在react中是使用一个虚拟dom来实现的


因为它是在内存中，然后一次性在再改变dom


如果他们是在同一个文档流中，只要一个元素的高度变化 了，一定会导致后面的元素重排

所以我可以在设计时

有了解php和node

？？？

就是一个个人博客

我想了解是什么部门，用什么样的技术

谢谢

